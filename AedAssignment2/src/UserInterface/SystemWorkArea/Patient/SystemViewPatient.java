/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.SystemWorkArea.Patient;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;
/**
 *
 * @author Aditya
 */
public class SystemViewPatient extends javax.swing.JPanel {

    /**
     * Creates new form SystemViewPatient
     */
    PatientDirectory patientDirectory;
    PersonDirectory personDirectory;
    Person person;
    
    public SystemViewPatient(PatientDirectory patientDirectory,PersonDirectory personDirectory) {
        initComponents();
        this.patientDirectory=patientDirectory;
        this.personDirectory=personDirectory;
        populateData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientList = new javax.swing.JTable();
        lblTitle = new javax.swing.JLabel();
        btnSearchPatient = new javax.swing.JButton();
        txtSearchPatient = new javax.swing.JTextField();
        lblSearchPatient = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 255, 255));

        btnDelete.setBackground(new java.awt.Color(255, 0, 0));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        tblPatientList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Id", "Name", "Age", "Gender", "Age", "Height", "Weight", "Phone No", "Email", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatientList);

        lblTitle.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("View Patient Information");

        btnSearchPatient.setBackground(new java.awt.Color(102, 255, 102));
        btnSearchPatient.setText("Search");
        btnSearchPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchPatientActionPerformed(evt);
            }
        });

        txtSearchPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchPatientActionPerformed(evt);
            }
        });

        lblSearchPatient.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        lblSearchPatient.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        lblSearchPatient.setText("Search Patient by Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(180, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(187, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnDelete)
                        .addContainerGap())))
            .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(lblTitle)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:

        int selectedRowIndex = tblPatientList.getSelectedRow();

        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblPatientList.getModel();
        Patient selectedPatient = (Patient) model.getValueAt(selectedRowIndex,0 );
        patientDirectory.deletePatient(selectedPatient);

        JOptionPane.showMessageDialog(this, "Patient deleted successfully!");
        populateData();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtSearchPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchPatientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchPatientActionPerformed

    private void btnSearchPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchPatientActionPerformed
        // TODO add your handling code here:
        
        if(txtSearchPatient.getText().trim().isEmpty()|| txtSearchPatient.getText()==null)
        {
            JOptionPane.showMessageDialog(this,"Please Enter a valid Patient Name");
            return;
        }
        
        populateDataByPatientName();
        
    }//GEN-LAST:event_btnSearchPatientActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearchPatient;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblSearchPatient;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblPatientList;
    private javax.swing.JTextField txtSearchPatient;
    // End of variables declaration//GEN-END:variables

    private void populateData()
    {
        System.err.println("In populateData");
        {
        try{
            var x = patientDirectory.getPatients();
            DefaultTableModel model = new DefaultTableModel(new Object[]{ "Patient Id", "Patient Name", "Contact Number", "Age","Height","Weight","Email", "Contact", "Address", "City", "Community"}, 0);
            if(x!=null && !x.isEmpty())
            {
                x.forEach(patient -> {
                
                String city = null;
                String community = null;              
                Map<String, String> communityMap = patient.getHouse().getCommunity().getCommunity();            
                for(Map.Entry m: communityMap.entrySet()){  
                    city = m.getKey().toString();
                    community = m.getValue().toString();
                }  
                    
                model.addRow(new Object[]
                {patient,patient.getName(), 
                    patient.getCellPhoneNumber(),patient.getAge(),patient.getHeight(),patient.getWeight(), patient.getEmailId(),patient.getCellPhoneNumber(),patient.getHouse().getHouseNum()+" "+ patient.getHouse().getStreet(),
                    city,community});

            });
                
            tblPatientList.setModel(model);
            }
            else{
                tblPatientList.setModel(model);
            }
        }
        catch(Exception e){
            System.out.println("Exception occured in populating patients data");
        }
    }
}

    private void populateDataByPatientName() {
        try{
            var x = patientDirectory.getPatients();
            DefaultTableModel model = new DefaultTableModel(new Object[]{ "Patient Id", "Patient Name", "Contact Number", "Age","Height","Weight","Email", "Contact", "Address", "City", "Community"}, 0);
            if(x!=null && !x.isEmpty())
            {
                x.forEach(patient -> {
                String searchPatientName = txtSearchPatient.getText();
                if(patient.getName().toLowerCase().contains(searchPatientName.toLowerCase())){
                    
                    String city = null;
                    String community = null;              
                    Map<String, String> communityMap = patient.getHouse().getCommunity().getCommunity();            
                    for(Map.Entry m: communityMap.entrySet()){  
                        city = m.getKey().toString();
                        community = m.getValue().toString();
                    }  

                    model.addRow(new Object[]
                    {patient,patient.getName(), 
                    patient.getCellPhoneNumber(),patient.getAge(),patient.getHeight(),patient.getWeight(), patient.getEmailId(),patient.getCellPhoneNumber(),patient.getHouse().getHouseNum()+" "+ patient.getHouse().getStreet(),
                    city,community});
                    
                }

            });
                
            tblPatientList.setModel(model);
            }
            else{
                tblPatientList.setModel(model);
            }
        }
        catch(Exception e){
            System.out.println("Exception occured in populating patients data");
        }
    }
    }

     
       
